version: '3'

dotenv: ['.env']

env:
  TITLE: eShop On AKS
  HELM_CHART: eshop
  SKU: "Standard_D4ads_v5"
  COUNT: 2

tasks:
  default: 
    cmds: 
    - task --list 
  
  up:
    desc: Creates Azure infrastructure and deploys application code
    cmds:
    - terraform -chdir=./infrastructure workspace new {{.REGION}} || true
    - terraform -chdir=./infrastructure workspace select {{.REGION}}
    - terraform -chdir=./infrastructure init
    - task: apply
    - task: creds
    - task: configs
    vars: 
      REGION: '{{default "southcentralus" .CLI_ARGS}}'

  apply:
    cmds:
    - terraform -chdir=./infrastructure apply -auto-approve
       -var "region={{.REGION}}" 
       -var "vm_size={{.SKU}}" 
       -var "node_count={{.COUNT}}"
       -var "tags={{.TITLE}}" 
       -var "certificate_base64_encoded={{.CERT}}" 
       -var "certificate_password={{.CERT_PFX_PASS}}"
       -compact-warnings
    vars: 
      REGION: '{{default "southcentralus" .CLI_ARGS}}'
      CERT:
        sh: cat {{.CERT_PATH}} | base64

  refresh:
    cmds:
    - terraform -chdir=./infrastructure refresh -var "region={{.REGION}}" -var "vm_size={{.SKU}}" -var "node_count={{.COUNT}}"  -var "tags={{.TITLE}}"
    vars: 
      REGION: '{{default "southcentralus" .CLI_ARGS}}'

  creds:
    desc: Gets credential file for newly created AKS cluster
    cmds:
    - az aks get-credentials -g {{.RG}} -n {{.AKS}} --overwrite-existing
    - kubelogin convert-kubeconfig -l azurecli
    vars:
      RG: 
        sh: terraform -chdir=./infrastructure output -raw RESOURCE_GROUP
      AKS: 
        sh: terraform -chdir=./infrastructure output -raw AKS_CLUSTER_NAME

  configs:
    desc: Update configurations with proper values Key
    cmds:
    - export AI_INSTRUMENTATION_KEY={{.AI_INSTRUMENTATION_KEY}} ;
      envsubst < cluster-config/istio/configuration/otel.tmpl > cluster-config/istio/configuration/otel.yaml
    - export INGRESS_CLIENT_ID={{.INGRESS_CLIENT_ID}} ;
      envsubst < cluster-config/istio/gateway/serviceaccount.tmpl > cluster-config/istio/gateway/serviceaccount.yaml
    - export KEYVAULT_NAME={{.KEYVAULT_NAME}} ;
      export INGRESS_CLIENT_ID={{.INGRESS_CLIENT_ID}} ;
      envsubst <cluster-config/istio/gateway/secretsprovider.tmpl > cluster-config/istio/gateway/secretsprovider.yaml
    - git add cluster-config/istio/configuration/otel.yaml
    - git add cluster-config/istio/gateway/serviceaccount.yaml
    - git add cluster-config/istio/gateway/secretsprovider.yaml
    - git commit -m "Updated Config values"
    - git push
    vars:
      AI_INSTRUMENTATION_KEY:
        sh: terraform -chdir=./infrastructure output -raw AI_INSTRUMENTATION_KEY
      KEYVAULT_NAME:
        sh: terraform -chdir=./infrastructure output -raw KEYVAULT_NAME
      INGRESS_CLIENT_ID:
        sh: terraform -chdir=./infrastructure output -raw INGRESS_CLIENT_ID

  build: 
    desc: Builds containers
    dir: ./scripts
    cmds:
    - pwsh ./build_containers.ps1 -AppName {{.APP_NAME}} -SubscriptionName {{.SUBSCRIPTION_NAME}} -SourceRootDirectory {{.SOURCE_DIR}}
    vars:
      APP_NAME: 
        sh: terraform -chdir=../infrastructure output -raw APP_NAME
      SUBSCRIPTION_NAME:
        sh: az account show --query name -o tsv
      SOURCE_DIR: '{{default "~/code/eShop" .CLI_ARGS}}'

  deploy:
    desc: Deploys application via Helm
    cmds:
    - helm upgrade -i {{.HELM_CHART}} 
        --set ACR_NAME="{{.ACR_NAME}}" 
        --set COMMIT_VERSION={{.COMMIT_VERSION}} 
        --set APP_NAME={{.APP_NAME}} 
        --set ARM_WORKLOAD_APP_ID={{.ARM_WORKLOAD_APP_ID}} 
        --set ARM_TENANT_ID={{.ARM_TENANT_ID}} 
        ./chart
    vars:
      APP_NAME: 
        sh: terraform -chdir=./infrastructure output -raw APP_NAME
      ARM_WORKLOAD_APP_ID: 
        sh: terraform -chdir=./infrastructure output -raw ARM_WORKLOAD_APP_ID
      ARM_TENANT_ID:
        sh: terraform -chdir=./infrastructure output -raw ARM_TENANT_ID

  down:
    desc: Destroys all Azure resources and cleans up Terraform
    cmds:
    - az group list --tag Application="{{.TITLE}}"" --query "[].name" -o tsv | xargs -ot -n 1 az group delete -y --no-wait -n || true
    - cd infrastructure ;
      rm -rf terraform.tfstate.d .terraform.lock.hcl .terraform terraform.tfstate terraform.tfstate.backup .terraform.tfstate.lock.info || true